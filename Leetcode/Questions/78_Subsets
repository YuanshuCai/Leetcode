class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        helper(ans, nums, new ArrayList<>(), 0);
        return ans;
    }
    private void helper(List<List<Integer>> ans, int[] nums,List<Integer> cur, int index){
        //base case
        if (index == nums.length){
            ans.add(new ArrayList<> (cur));
            return;
        }
        //don't add the number in this level
        helper(ans, nums, cur, index + 1);
        //add the number
        cur.add(nums[index]);
        helper(ans, nums, cur, index + 1);

        //backtracking
        cur.remove(cur.size() - 1);
    }
}

class Solution2 {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        generateSubsets(nums, 0, new ArrayList<>(), result);
        return result;
    }

    private void generateSubsets(int[] nums, int start, List<Integer> current, List<List<Integer>> result) {
        result.add(new ArrayList<>(current));

        for (int i = start; i < nums.length; i++) {
            current.add(nums[i]);
            generateSubsets(nums, i + 1, current, result);
            current.remove(current.size() - 1);
        }
    }
}