//recursion
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if (head == null || left == right) {
            return head;
        }
        return helper(head, 1, left, right);
    }

    private ListNode helper(ListNode node, int indicator, int left, int right) {
        if (indicator == left) {
            ListNode prev = null;
            ListNode current = node;
            while (indicator <= right) { //nodes between left and right
                ListNode temp = current.next;
                current.next = prev;
                prev = current;
                current = temp;
                indicator++;
            }
            node.next = current;
            return prev;
        } else if (indicator < left) {
            node.next = helper(node.next, indicator + 1, left, right);
        }
        return node;
    }
}
        
/*iterative
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummyHead = new ListNode(0, head);
        ListNode leftNode = dummyHead;
        for (int i = 0; i < left - 1; i++) leftNode = leftNode.next;
        ListNode cur = leftNode.next;
        //bring cur in front of left until you finish right
        for (int i = 0; i < right - left; i++){
            ListNode next = cur.next;
            cur.next = next.next;
            next.next = leftNode.next;
            leftNode.next = next;
        }
        return dummyHead.next;
        
    }
}
*/