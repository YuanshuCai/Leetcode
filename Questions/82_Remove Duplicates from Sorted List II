//recursion
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null) return head;
        if (head.val != head.next.val){
            head.next = deleteDuplicates(head.next);
            return head;
        }
        //if the head and head.next same
        while (head.next != null && head.val == head.next.val){
            head = head.next;
        }
        return deleteDuplicates(head.next);
    }
}
/* iterative
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null) return head;
        ListNode dummyHead = new ListNode(101, head);
        ListNode prev = dummyHead;
        ListNode cur = prev.next;
        while (cur != null) {
            boolean duplicate = false;
            while (cur.next != null && cur.val == cur.next.val) {
                duplicate = true;
                cur = cur.next;
            }
            if (duplicate) {
                prev.next = cur.next; // Skipping over duplicates
            } else {
                prev = prev.next;
            }
            
            cur = cur.next;
        }
        
        return dummyHead.next;
    }
}
   1 2 3 3 4 4 5 
              pre 
              cur
 */