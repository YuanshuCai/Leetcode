class Solution {
    // Time Complexity: O(N) - We visit each node exactly once.
    // Space Complexity: O(W) - The maximum width of the tree, which is the maximum number of nodes at any level.

    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) return ans;
        
        Queue<TreeNode> q = new ArrayDeque<>();
        q.offer(root);

        while (!q.isEmpty()) {
            int levelSize = q.size();

            for (int i = 0; i < levelSize; i++) {
                TreeNode cur = q.poll();

                // Add the last node's value in each level (rightmost node) to the result
                if (i == levelSize - 1) {
                    ans.add(cur.val);
                }

                // Enqueue the left and right children if they exist
                if (cur.left != null) q.offer(cur.left);
                if (cur.right != null) q.offer(cur.right);
            }
        }

        return ans;
    }
}
