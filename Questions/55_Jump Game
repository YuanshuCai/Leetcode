class Solution1 {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        /*
        [7,1,1,1,4]
           i
            
        */
        //induction rule 
        //jumpableLen = i + nums[i]
        
        //base case -
        int jumpableLen = 0;
        //furthest index from index 0 that you can jump to
        for (int i = 0 ; i < n; i++){
            if(i > jumpableLen) return false;
            jumpableLen = Math.max(jumpableLen, i + nums[i]);
        }
        return true;
    }
}

class Solution2 {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        boolean[] ans = new boolean[n];
        ans[0] = true;
        for (int i = 1; i < n; i++){
            for (int j = 0; j < i; j++){
                if (ans[j] && nums[j] + j >= i){
                    ans[i] = true;
                    break;
                }
            }
        }
        return ans[n - 1];
    }
}
/*boolean[] ans physical meaning is the posibility of
jumping from ans[i] to the end of array;*/

class Solution3 {
    public boolean canJump(int[] nums) {
        //from right to left
        int n = nums.length;
        boolean[] ans = new boolean[n];
        ans[n - 1] = true;
        for (int i = n - 2; i >=0; i--){
            for (int j = i + 1; j < n; j ++){
                if (ans[j] && nums[i] + i >= j){
                    ans[i] = true;
                    break;
                }
            }
        }
        return ans[0];
    }
}